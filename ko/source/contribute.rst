. _ch_contribute:

컨트리뷰션
==========

오픈 소스 소프트웨어 의 묘미 중 하나는 자체 개발에 참여할 수 있습니다.
이 장에서는 Ryu 의 개발에 참여 하는 방법을 소개 합니다.

개발 체제
---------

Ryu 의 개발 은 메일링리스트를 중심으로 진행되고 있습니다.
우선은 메일링리스트에 가입 하는 것부터 시작 합시다.

https://lists.sourceforge.net/lists/listinfo/ryu-devel

메일링리스트의 교환 은 기본적으로 영어로 진행 됩니다.
사용법 등 의문이 있거나 결함 것으로 보인다 같은 행동 에 조우했을 때,
이메일 을 보내는 것을 망설일 필요 는 없습니다.
오픈 소스 소프트웨어 를 사용하는 것 자체가 프로젝트에
중요한 기여 하기 때문입니다.

개발 환경
---------

이 섹션에서는 Ryu 의 개발 에 필요한 환경 및 고려 사항에 대해 설명 합니다.

Python
^^^^^^

Ryu 는 Python 2.6 이상 을 지원 합니다 .
즉 , Python 2.7 에서만 사용 가능한 구문 등은 사용 하지 마십시오 .

Python 3.0 이상 은 당분간 지원 되지 않습니다.
하지만 소스 코드 는 향후 변경 이 가능한 적게 않아도되는 기술 을
유의 하면 좋을 것입니다.

코딩 스타일
^^^^^^^^^^^

Ryu 소스 코드 PEP8 하는 코딩 스타일 을 준수 하고 있습니다 .
후술하는 패치 발송 시에는 그 내용이 PEP8 을 준수 하고 있는지
미리 확인 하십시오.

http://www.python.org/dev/peps/pep-0008/

또한, 소스 코드 가 PEP8 을 준수 하는지 확인 하려면 테스트 섹션
소개하는 스크립트 와 함께 검사기를 이용할 수 있습니다.

https://pypi.python.org/pypi/pep8

테스트
^^^^^^

Ryu 에는 몇 가지 자동화 된 테스트 가 있지만 가장 간단하고 많이 사용되는 것은
Ryu 만으로 완결 하는 단위 테스트 입니다.
후술하는 패치 발송 시 에는 변경 사항 때문에 단위 테스트 실행
실패하지 않는 것을 미리 확인 하십시오.
또한 새로 추가 된 소스 코드는 가능한 한 단위 테스트를
설명하는 것이 바람직 할 것 입니다.

.. rst-class::console

:

   $ cd ryu/
   $ ./run_tests.sh

패치 쓰기
---------

기능 추가 및 버그 수정 등으로 저장소 의 소스 코드 를 변경 하는 때
변경 사항 을 패치 한 후 , 우편 으로 보냅니다.
큰 변경 은 미리 메일링리스트 에서 논의되고 있다고
바람직한 것입니다.

.. NOTE :
   Ryu 소스 코드 저장소는 GitHub 에 존재하지만 ,
   풀 요청을 이용한 개발 프로세스 가 아님 에 주의 하십시오.

송부 하는 패치 형식은 Linux 커널 개발 에서 사용되는 스타일 이 상정되고 있습니다.
이 섹션에서는 이 스타일 패치를 메일 링리스트에 쓰기 까지 의 일례를
소개 하고 있습니다 만, 더 자세한 내용은 관련 문서 를 참조 하십시오.

http://lxr.linux.no/linux/Documentation/SubmittingPatches

그럼 단계를 소개 합니다.

1. 소스 코드 를 체크 아웃

 우선 Ryu 의 소스 코드 를 체크 아웃 합니다.
 GitHub 에서 소스 코드 를 fork 하여 자신 의 작업 저장소를 만들어서
 상관 없지만 , 단순화하기 위해 원본을 그대로 사용한 예제 입니다 .

   ``$ git clone https://github.com/osrg/ryu.git``
   ``$ cd ryu/``

2. 소스 코드 를 변경

 Ryu 소스 코드 에 필요한 사항을 변경합니다 .
 작업 구분할 때는 변경 내용을 커밋 합시다 .

   ``$ git commit -a``

3. 패치를 만들기

 변경 내용 의 차등 을 패치 합니다.
 패치는 Signed-off-by : 행을 붙이는 것을 잊지 마십시오.
 이 서명은 당신이 제출 한 패치가 오픈 소스 소프트웨어
 라이선스 , 문제없는 것을 선언 합니다.

   ``$ git format-patch origin -s``

4. 패치 쓰기

 완성 된 패치 의 내용이 올바른지 확인 한 후 , 우편으로 보냅니다.
 귀하의 우편물 에서 직접 보낼 수도 있지만 git-send-email ( 1 ) 을 사용하는 것으로
 대화식으로 처리 할 수 있습니다.

   ``$ git send-email 0001-sample.patch``

5. 응답 대기

 패치 에 대한 응답을 기다립니다.
 그대로 받아 들여지는 경우 도 있습니다 만, 지적 사항 등이 있으면
 내용을 수정 하여 다시 보낼 필요가 있을 것입니다.



