아키텍처
========

Ryu 아키텍처 를 소개 합니다.
각 클래스의 사용법 등은 'API 참조 <http://ryu.readthedocs.org/en/latest/>'를 참조하십시오.

응용 프로그래밍 모델
--------------------

Ryu 응용 프로그램 프로그래밍 모델을 설명합니다.

.. only:: latex

    .. image:: images/arch/fig1.eps

.. only:: not latex

    .. image:: images/arch/fig1.png

응용 프로그램
^^^^^^^^^^^^^

응용 프로그램은 ``ryu.base.app_manager.RyuApp`` 을 계승한 클래스입니다.
사용자 논리는 응용 프로그램 이라고 합니다.

이벤트
^^^^^^

이벤트는 ``ryu.controller.event.EventBase`` 를 상속한 클래스의
개체입니다.
응용 프로그램 간의 통신은 이벤트를 송수신 함으로써 가능합니다.

이벤트 큐
^^^^^^^^^

각 응용 프로그램은 이벤트 수신을 위한 큐를 하나 가지고 있습니다.

스레드
^^^^^^

Ryu 는 eventlet을 사용한 다중 스레드로 동작 합니다.
스레드 는 비선점형 이므로, 시간이 걸리는 처리를 행하는
경우에는 주의가 필요합니다.

이벤트 루프
"""""""""""

응용 프로그램 당 한 개의 스레드 가 자동으로 생성 됩니다.
이 스레드 는 이벤트 루프를 실행 합니다.
이벤트 루프는 이벤트 큐에 이벤트가 있으면 꺼내
해당 이벤트 처리기 (아래 ) 를 호출합니다.

추가 스레드
"""""""""""

hub.spawn 함수를 사용하여 추가 스레드를 만들고 응용 프로그램 별
처리를 할 수 있습니다.

eventlet
""""""""

eventlet 기능을 애플리케이션 에서 직접 사용될 수 있지만 ,
비추천 입니다.
가능하다면 hub 모듈 제공하는 래퍼를 사용 하도록 하십시오.

이벤트 처리기
^^^^^^^^^^^^^

응용 프로그램 클래스 의 메서드를 ``ryu.controller.handler.set_ev_cls``
장식 으로 한정 하여 이벤트 처리기를 정의 할 수 있습니다 .
이벤트 처리기 는 지정된 형식 의 이벤트 가 발생했을 때
응용 프로그램 이벤트 루프 에서 호출됩니다.

..  XXX CONTEXTS
..  XXX 이벤트 유형
..  XXX openflow message
..  XXX ryu-manager 등 의 설명 은 어떤 장??
